---
title: "VR_Niobrara"
format: html
editor: visual
---

```{r, warning=FALSE, message=FALSE}
library(tidyverse)
library(lme4)
library(readr)
```

```{r}
#Read in Stage Transition Data
UNK <- read.csv("UNK_single.csv")
UNL <- read.csv("UNL_single.csv")
UNM <- read.csv("UNM_single.csv")


UNK <- UNK %>% select(-NEWROS)
UNL <- UNL %>% select(-NEWROS)
UNM <- UNM %>% select(-NEWROS)

UNK$PLOT[UNK$PLOT == "PLOT K"] <- "Plot K"

Niobrara <- rbind(UNL, UNM, UNK)

Niobrara <- Niobrara %>% transform(Unique.RAMET = interaction(SITE, PLOT, RAMET))
Niobrara <- Niobrara %>% relocate(c(Unique.RAMET), .after = RAMET)

```

# Niobrara

```{r}
#Preparing Data for Survival and Stage analysis
keeps <- c("SITE","PLOT","RAMET","Unique.RAMET", "Month","Year","NextYear","stage.modified", "NextStage", "Survival") #Keep only relevant columns necessary for vital rate calculation

Niobrara <- Niobrara[keeps] # Drop all other columns, not necessary for now.

colnames(Niobrara) = c("SITE","PLOT","RAMET", "Unique.RAMET", "Month","Year","Fate.Year","state", "Fate", "Survival")

Niobrara$Natu.Death = 1
Niobrara$Natu.Death[Niobrara$Survival == "No" & Niobrara$state == "SF"] <- NA
Niobrara$Natu.Death[Niobrara$Survival == "No" & Niobrara$state == "MF"] <- NA
Niobrara$Natu.Death[Niobrara$Survival == "Yes"] <- 0

FateYear.cor <- function(x){
          D <- x
          for(i in 1:length(x)){
             {D[i] <- x[i]+ 1}
            
        }
        return(D)
}

Niobrara$Fate.Year <- FateYear.cor(Niobrara$Year)
##########################################################################################
# define Survival
Niobrara$Survival[Niobrara$Survival == "Yes"] <- 1
Niobrara$Survival[Niobrara$Survival == "No"] <- 0

#define emergence/dormancy
Niobrara$toIA = 0
Niobrara$toIA[Niobrara$Fate =="inactive"]=1
Niobrara$toIA[Niobrara$Survival == 0]=NA    #conditioned on Survival
Niobrara$toIA[Niobrara$Fate =="not.tagged"]= NA

# define MF
Niobrara$toMF = 0
Niobrara$toMF[Niobrara$Fate == "MF"] = 1
Niobrara$toMF[Niobrara$Survival == 0] = NA   #conditioned on Survival
Niobrara$toMF[Niobrara$toIA == 1]=NA      #conditioned on not inactive
Niobrara$toMF[Niobrara$Fate =="not.tagged"]= NA

# define SF
Niobrara$toSF = 0
Niobrara$toSF[Niobrara$Fate == "SF"] = 1
Niobrara$toSF[Niobrara$Survival == 0] = NA   #conditioned on Survival
Niobrara$toSF[Niobrara$toIA == 1]=NA      #conditioned on not inactive
Niobrara$toSF[Niobrara$Fate =="not.tagged"]= NA

#define MR plants
Niobrara$toMR=0
Niobrara$toMR[Niobrara$Fate=="MR"]=1
Niobrara$toMR[Niobrara$Survival==0]=NA #conditioned on survival
Niobrara$toMR[Niobrara$toIA==1]=NA #condit on not being inactive
Niobrara$toMR[Niobrara$toMF==1]=NA #condit on not multiple flowering
Niobrara$toMR[Niobrara$toSF==1]=NA #condit on not Single flowering
Niobrara$toMR[Niobrara$Fate =="not.tagged"]= NA

#define single rosette, probability of being small or Large condit on survival, not flowering or not being inactive
Niobrara$toSR=NA
Niobrara$toSR[Niobrara$Fate=="SR"]=1
Niobrara$toSR[Niobrara$Fate=="MR"]=0
Niobrara$toSR[Niobrara$Fate =="not.tagged"]= NA
#######################################################
Niobrara$toF = 0
Niobrara$toF[Niobrara$Fate == "MF"] = 1
Niobrara$toF[Niobrara$Fate == "SF"] = 1
Niobrara$toF[Niobrara$Survival == 0] = NA #conditioned on survival
Niobrara$toF[Niobrara$toIA == 1]=NA
Niobrara$toF[Niobrara$Fate =="not.tagged"]= NA
```

## Inactive Vital Rate

```{r}
inactive.data = Niobrara[Niobrara$state == "inactive",]

  
IAsurv<-rep(1,19)   #survival for inactives is always 1!

  # conditional flowering analysis for this stage class
  m2 <- try(glmer(toSF ~ 1 +(1|Fate.Year), data=inactive.data, family=binomial(link="logit"), nAGQ = 20), T) #could not converge with random effect of year
  B = try(coef(m2), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte2 = try(exp(fixef(m2))/(1+exp(fixef(m2))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte2 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m2) else allB[j] = allB[j] }
IAtoSF<-allrte

######################
#IAtoMF<-rep(0,19)

  # conditional dormancy analysis for this stage class
  m3 <- try(glmer(toIA ~ 1 +(1|Fate.Year), data=inactive.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m3), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte3 = try(exp(fixef(m3))/(1+exp(fixef(m3))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte3 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m3) else allB[j] = allB[j] }
    
IAtoIA<-allrte


  # prob of being "M", conditional on being vegetative for this stage class
  m4 <- try(glmer(toMR ~ 1 + (1|Fate.Year), data=inactive.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m4))
  betas = try(B$Fate.Year,T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte4 = try(exp(fixef(m4))/(1+exp(fixef(m4))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte4 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m4) else allB[j] = allB[j] }
IAtoMR <- allrte

 m5 <- try(glmer(toSR ~ 1 + (1|Fate.Year), data=inactive.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m5))
  betas = try(B$Fate.Year,T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte5 = try(exp(fixef(m5))/(1+exp(fixef(m5))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte5 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m5) else allB[j] = allB[j] }
    
IAtoSR<-allrte


#IAtoSeedling<-rep(0,19)

#IAtoSR1 <- 1 - (IAtoSF + IAtoMR + IAtoIA)
```

## Single Rosette Vital Rate

```{r}
SR.data = Niobrara[Niobrara$state == "SR", ]
SR.data$Survival <- as.numeric(SR.data$Survival)


#########################SR Survival################################
m6 <- try(glmer(Survival ~ 1 + (1|Fate.Year), data=SR.data, family=binomial(link="logit"), nAGQ = 20), T)   
  B = try(coef(m6), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte6 = try(exp(fixef(m6))/(1+exp(fixef(m6))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte6 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m6) else allB[j] = allB[j] }
SRsurv <- allrte
#########################SR toMF################################
  m7 <- try(glmer(toMF ~ 1 + (1|Fate.Year), data=SR.data, family=binomial(link="logit"), nAGQ = 20), T)   
  B = try(coef(m7), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte7 = try(exp(fixef(m7))/(1+exp(fixef(m7))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte7 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m7) else allB[j] = allB[j] }
SRtoMF <- allrte

#########################SR to SF################################
m8 <- try(glmer(toSF ~ 1 + (1|Fate.Year), data=SR.data, family=binomial(link="logit"), nAGQ = 20), T)   
  B = try(coef(m8), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte8 = try(exp(fixef(m8))/(1+exp(fixef(m8))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte8 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m8) else allB[j] = allB[j] }
SRtoSF<-allrte
#########################SR to inactive################################
m9 <- try(glmer(toIA ~ 1 + (1|Fate.Year), data=SR.data, family=binomial(link="logit"), nAGQ = 20), T)   
  B = try(coef(m9), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte9 = try(exp(fixef(m9))/(1+exp(fixef(m9))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte9 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m9) else allB[j] = allB[j] }
SRtoIA<-allrte

#########################SR to MR################################
m10 <- try(glmer(toMR ~ 1 + (1|Fate.Year), data=SR.data, family=binomial(link="logit"), nAGQ = 20), T)   
  B = try(coef(m10), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte10 = try(exp(fixef(m10))/(1+exp(fixef(m10))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte10 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m10) else allB[j] = allB[j] }
SRtoMR<-allrte

#########################SR to SR################################
m11 <- try(glmer(toSR ~ 1 + (1|Fate.Year), data=SR.data, family=binomial(link="logit"), nAGQ = 20), T)   
  B = try(coef(m11), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte11 = try(exp(fixef(m11))/(1+exp(fixef(m11))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte11 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m11) else allB[j] = allB[j] }
SRtoSR<-allrte


#SRtoSR1 <- 1-(SRtoMR + SRtoSF + SRtoMF + SRtoIA)

#SRtoSeedling <- rep(0,19)
```

## Multiple Rosette Vital Rate

```{r}
MR.data = Niobrara[Niobrara$state == "MR", ]
MR.data$Survival <- as.numeric(MR.data$Survival)

 # conditional dormancy analysis for this stage class
  m12 <- try(glmer(Survival ~ 1 +(1|Fate.Year), data=MR.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m12), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte12 = try(exp(fixef(m12))/(1+exp(fixef(m12))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte12 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m12) else allB[j] = allB[j] }
    
MRsurv <- allrte


 ##############################
 m13 <- try(glmer(toIA ~ 1 +(1|Fate.Year), data=MR.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m13), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte13 = try(exp(fixef(m13))/(1+exp(fixef(m13))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte13 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m13) else allB[j] = allB[j] }
    
MRtoIA <- allrte
###############################

m14 <- try(glmer(toSF ~ 1 +(1|Fate.Year), data=MR.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m14), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte14 = try(exp(fixef(m14))/(1+exp(fixef(m14))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte14 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m14) else allB[j] = allB[j] }
    
MRtoSF <- allrte

###############################

m15 <- try(glmer(toMF ~ 1 +(1|Fate.Year), data=MR.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m15), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte15 = try(exp(fixef(m15))/(1+exp(fixef(m15))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte15 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m15) else allB[j] = allB[j] }
    
MRtoMF <- allrte

###############################

m16 <- try(glmer(toMR ~ 1 +(1|Fate.Year), data=MR.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m16), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte16 = try(exp(fixef(m16))/(1+exp(fixef(m16))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte16 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m16) else allB[j] = allB[j] }
    
MRtoMR <- allrte

################################
m17 <- try(glmer(toSR ~ 1 +(1|Fate.Year), data=MR.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m17), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte17 = try(exp(fixef(m17))/(1+exp(fixef(m17))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte17 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m17) else allB[j] = allB[j] }
    
MRtoSR <- allrte

#MRtoSR1 <- 1 - (MRtoMR + MRtoSF + MRtoIA + MRtoMF) 

#####
#MRtoSeedling <- rep(0,19)
```

## Seedling vital Rate

```{r}
Seedling.data = Niobrara[Niobrara$state == "Seedling", ]
Seedling.data$Survival <- as.numeric(Seedling.data$Survival)

#######################
m18 <- try(glmer(Survival ~ 1 +(1|Fate.Year), data=Seedling.data, family=binomial(link="logit"), nAGQ = 20), T)
  B = try(coef(m18), T)
  betas = try(B$Fate.Year, T)
  rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
               betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte18 = try(exp(fixef(m18))/(1+exp(fixef(m18))),T) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte18 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m18) else allB[j] = allB[j] }
    
Seedlingsurv <- allrte

#summary(m18)

#######################
#m19 <- try(glmer(toSR ~ 1 +(1|Fate.Year), data=Seedling.data, family=binomial(link="logit")), T)
  #B = try(coef(m19), T)
  #betas = try(B$Fate.Year, T)
  #rte = try(exp(B$Fate.Year)/(1+exp(B$Fate.Year)),T)  
  #allB = c(betas["1991",1], betas["1992",1], betas["1993",1],
  #             betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  #   allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
  #  meanrte19 = try(exp(fixef(m19))/(1+exp(fixef(m19))),T) #mean back-transformed maximum likelihood  estimate across years
 #   for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte19 else allrte[j] = allrte[j] }
 #   for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m19) else allB[j] = allB[j] }
    
#SeedlingtoSR <- allrte

SeedlingtoSR <- rep(1,19)
```

## Prepare Data for Recruitment

```{r}
library(reshape2)
Niobrara1 <- rbind(UNL, UNM, UNK)
Niobrara1 <- Niobrara1 %>% transform(Unique.RAMET = interaction(SITE, PLOT, RAMET))
Niobrara1 <- Niobrara1 %>% relocate(c(Unique.RAMET), .after = RAMET)
#Preparing Data for Survival and Stage analysis
Niobrara1.rec = dcast(Niobrara1,  SITE+PLOT+RAMET+Unique.RAMET+stage.modified+Year ~ PrevStage, value.var = "PrevStage")#This code is to extract plant individuals that appeared for their first time.

Niobrara1.rec <- Niobrara1.rec %>% select(SITE,PLOT, RAMET, Unique.RAMET, Year, stage.modified,  First.Appearance) %>% filter(First.Appearance == "First.Appearance")

Niobrara1.rec <- dcast(Niobrara1.rec,  PLOT+Year ~ stage.modified, value.var = "stage.modified") 

Niobrara1.rec <- Niobrara1.rec %>% 
  rowwise() %>% 
  mutate(Flowering_rec = sum(MF, SF, na.rm = TRUE))

#Niobrara1.rec <- Niobrara1.rec %>% select(PLOT, Year, MR, Seedling, SR, Flowering_rec)

FateYear.cor <- function(x){
          D <- x
          for(i in 1:length(x)){
             {D[i] <- x[i]+ 1}
            
        }
        return(D)
}

Niobrara1$Fate.Year <- FateYear.cor(Niobrara1$Year)

Niobrara1 = dcast(Niobrara1,  PLOT+Fate.Year ~ stage.modified, value.var = "stage.modified")%>% select(PLOT, Fate.Year, MF, SF, MR,  SR)

Niobrara1 <- Niobrara1 %>% 
  rowwise() %>% 
  mutate(Flowering_t = sum(MF, SF, na.rm = TRUE))%>%
  mutate(Rosette_t = sum(MR, SR, na.rm = TRUE))

Niobrara1 <- Niobrara1 %>% filter(Fate.Year != 2010)
colnames(Niobrara1) = c("PLOT","Year","T.MF","T.SF", "T.MR","T.SR", "Flowering_t", "Rosette_t")

Niobrara1.rec <- cbind(Niobrara1.rec, Flowering_t = Niobrara1$Flowering_t,  Rosette_t = Niobrara1$Rosette_t)

#sum(Niobrara1.rec$Flowering_rec) = 9
#sum(MR.data$toMF, na.rm = T) + sum(MR.data$toSF, na.rm = T) = 12
#sum(SR.data$toMF, na.rm = T) + sum(SR.data$toSF, na.rm = T) = 73
#sum(inactive.data$toSF, na.rm = T) = 1

#(1/95) + (9/95) + (12/95) + (73/95)
```

## Analysis for Recruitment

```{r}
m21 <-try(glmer(MR ~ 1 + offset(log(Rosette_t + 1)) + (1|Year), data = Niobrara1.rec, family=poisson(link=log), nAGQ = 20),T)
B = try(coef(m21), T)
  betas = try(B$Year, T)
  rte = try(exp(B$Year),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1], betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte21 = try(exp(fixef(m21))) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte21 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m21) else allB[j] = allB[j] }
    
MR_rec <- allrte
###########################################
m22 <-try(glmer(SR ~ 1 + offset(log(Rosette_t + 1)) + (1|Year), data = Niobrara1.rec, family=poisson(link=log), nAGQ = 20),T)
B = try(coef(m22), T)
  betas = try(B$Year, T)
  rte = try(exp(B$Year),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1], betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte22 = try(exp(fixef(m22))) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte22 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m22) else allB[j] = allB[j] }
    
SR_rec <- allrte

###########################################
m23 <- try(glmer(MF ~ 1 + offset(log(Rosette_t + 1)) + (1|Year), data = Niobrara1.rec, family=poisson(link=log), nAGQ = 20),T)
B = try(coef(m23), T)
  betas = try(B$Year, T)
  rte = try(exp(B$Year),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1], betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
     allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte23 = try(exp(fixef(m23))) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte23 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m23) else allB[j] = allB[j] }
    
MF_rec <- allrte

###########################################
m24 <- try(glmer(SF ~ 1 + offset(log(Rosette_t + 1)) + (1|Year), data = Niobrara1.rec, family=poisson(link=log), nAGQ = 20),T)
B = try(coef(m24), T)
  betas = try(B$Year, T)
  rte = try(exp(B$Year),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1], betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte24 = try(exp(fixef(m24))) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte24 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m24) else allB[j] = allB[j] }
    
SF_rec <- allrte

###########################################
m25 <- try(glmer(Seedling ~ 1 + offset(log(Flowering_t + 1)) + (1|Year), data = Niobrara1.rec, family=poisson(link=log), nAGQ = 20),T)
B = try(coef(m25), T)
  betas = try(B$Year, T)
  rte = try(exp(B$Year),T)  
  allB = c(betas["1991",1], betas["1992",1], betas["1993",1], betas["1994",1], betas["1995",1], betas["1996",1], betas["1997",1], betas["1998",1], betas["1999",1],betas["2000",1], betas["2001",1], betas["2002",1], betas["2003",1], betas["2004",1], betas["2005",1], betas["2006",1], betas["2007",1], betas["2008",1], betas["2009",1])
  allrte = c(rte["1991",1], rte["1992",1], rte["1993",1],rte["1994",1], rte["1995",1], rte["1996",1], rte["1997",1], rte["1998",1], rte["1999",1],rte["2000",1], rte["2001",1], rte["2002",1], rte["2003",1], rte["2004",1], rte["2005",1],rte["2006",1], rte["2007",1], rte["2008",1], rte["2009",1])
    # for now, I am substituting missing values with the mean value
    meanrte25 = try(exp(fixef(m25))) #mean back-transformed maximum likelihood  estimate across years
    for(j in 1:length(allrte)) {if(is.na(allrte[j]) == TRUE) allrte[j] = meanrte25 else allrte[j] = allrte[j] }
    for(j in 1:length(allB)) {if(is.na(allB[j]) == TRUE) allB[j] = fixef(m25) else allB[j] = allB[j] }
    
Seedling_rec <- allrte

```

## Prepare vital rates data

```{r}
##########################################
IAsurv<-as.matrix(IAsurv)
IAtoSF<-as.matrix(IAtoSF)
#IAtoMF<-as.matrix(IAtoMF)
IAtoIA<-as.matrix(IAtoIA)
IAtoMR<-as.matrix(IAtoMR)
IAtoSR<-as.matrix(IAtoSR)
SRsurv <- as.matrix(SRsurv)
SRtoIA<-as.matrix(SRtoIA)
SRtoSF<-as.matrix(SRtoSF)
SRtoMF<-as.matrix(SRtoMF)
SRtoMR<-as.matrix(SRtoMR)
SRtoSR<-as.matrix(SRtoSR)
MRsurv<-as.matrix(MRsurv)
MRtoSF<-as.matrix(MRtoSF)
MRtoSF<-as.matrix(MRtoSF)
MRtoIA<-as.matrix(MRtoIA) 
MRtoMR<-as.matrix(MRtoMR)
MRtoSR<-as.matrix(MRtoSR)
Seedlingsurv<-as.matrix(Seedlingsurv)
SeedlingtoSR<-as.matrix(SeedlingtoSR)
MR_rec <- as.matrix(MR_rec)
SR_rec <- as.matrix(SR_rec)
SF_rec <- as.matrix(SF_rec)
MF_rec <- as.matrix(MF_rec)
Seedling_rec <- as.matrix(Seedling_rec)

VR_Niobrara <- cbind(IAsurv, IAtoSF, IAtoIA, IAtoMR, IAtoSR, SRsurv, SRtoIA, SRtoSF, SRtoMF, SRtoMR, SRtoSR, MRsurv, MRtoSF, MRtoMF, MRtoIA, MRtoMR, MRtoSR, Seedlingsurv, SeedlingtoSR, MR_rec, SR_rec, SF_rec, MF_rec, Seedling_rec)
round(VR_Niobrara, digits = 3)

Year <- 1991:2009

VR_Niobrara <- cbind(Year, VR_Niobrara)

colnames(VR_Niobrara) <- c("Year","IAsurv", "IAtoSF", "IAtoIA", "IAtoMR", "IAtoSR", "SRsurv", "SRtoIA", "SRtoSF","SRtoMF", "SRtoMR", "SRtoSR", "MRsurv", "MRtoSF","MRtoMF", "MRtoIA", "MRtoMR", "MRtoSR", "Seedlingsurv", "SeedlingtoSR", "MR_rec", "SR_rec", "SF_rec","MF_rec", "Seedling_rec")


VR_Niobrara <- data.frame(VR_Niobrara)

#data.prop1$IAsurv

#dat4 <- data.prop1 %>% pivot_longer(cols = 2:25, names_to = "VR", values_to = "Estimate")
#dat5 <- VR_Niobrara %>% pivot_longer(cols = 2:25, names_to = "VR", values_to = "Estimate")

#dat6 <- merge(dat4, dat5, by = c("Year", "VR"))
#dat6$Year <- as.numeric(dat6$Year)


#ggplot(dat6, aes(x=Estimate.x, y=Estimate.y)) + geom_point() + ylab("Mixed Model") + xlab("Manual") + facet_wrap(~VR, scales = "free") + theme_bw() +  geom_abline(slope = 1, intercept = 0, linetype =2) 

write.csv(VR_Niobrara, "VR_Niobrara.csv")
```

## Synthesizing vital rates to calculate Asymptotic Population growth rate (i.e., Matrix Population Model, MPM)

```{r}
library(popbio)
library(popdemo)

#for loop from the first year to the last year to construct matrices

tmax=dim(VR_Niobrara)[1]    #estimates from 19 years
elements=36   #No. matrix elements

matrices.Niobrara<-matrix(nrow=elements, ncol=tmax);  #A matrix to collect all matrices


for (i in 1:tmax){
##############################
 mat <- matrix(c(
  ##To Seedling
  0, 
  0, 
  (VR_Niobrara[i, "Seedling_rec"])*0.9, # From flowering single rosette to Seedlings 
  0, 
  (VR_Niobrara[i, "Seedling_rec"])*0.1, # From flowering multiple rosette to Seedlings 
  0,
  
  ##To SR
  VR_Niobrara[i, "Seedlingsurv"]*VR_Niobrara[i, "SeedlingtoSR"], # From Seedlings to SR
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoSR"]) + (VR_Niobrara[i, "SR_rec"])*0.9, # From SR to SR
  0, # From SF to SR
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoSR"]) + (VR_Niobrara[i, "SR_rec"])*0.1, # From MR to SR
  0, # From MF to SR
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoSR"], # From D to SR
  
  ## To SF
  0, # From Seedling to SF
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoSF"])+ (VR_Niobrara[i, "SF_rec"])*0.9, #From SR to SF
  0, # From SF to SF
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoSF"])+ (VR_Niobrara[i, "SF_rec"])*0.1, # From MR to SF
  0, # From MF to SF
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoSF"], # From D to SF
  
  ## To MR
  0, # From Seedling to MR
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoMR"])+ (VR_Niobrara[i, "MR_rec"])*0.9, # From SR to MR
  0, # From SF to MR
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoMR"])+ (VR_Niobrara[i, "MR_rec"])*0.1, # From MR to MR
  0, # From MF to MR
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoMR"], # From D to MR
  
  ## To MF
  0, # From Seedling to MF
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoMF"])+ (VR_Niobrara[i, "MF_rec"])*0.9, # From SR to MF
  0, # From SF to MF
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoMF"])+ (VR_Niobrara[i, "MF_rec"])*0.1, # From MR to MF
  0, # From MF to MF
  0, # From D to MF
  
  ## To inactive
  0, # From Seedling to D
  VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoIA"], # From SR to D
  0, # From SF to D
  VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoIA"], # From MR to D
  0, # From MF to D
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoIA"] # From D to D
),  nrow=6, byrow = F) 

matrices.Niobrara[,i]<-as.vector(mat)

colnames(matrices.Niobrara) = c("1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009")

}

```

### Calculate lambda for each year

```{r}
column1<-matrices.Niobrara[,1]  #extract a column
lambda_1991<-matrix((column1), nrow=6) #reshape to a matrix
lambda(lambda_1991)
colSums(lambda_1991)
eigs(lambda_1991)

#####################
column2<-matrices.Niobrara[,2]  #extract a column
lambda_1992<-matrix((column2), nrow=6) #reshape to a matrix
lambda(lambda_1992)
colSums(lambda_1992)
eigs(lambda_1992)

##################
column3<-matrices.Niobrara[,3]  #extract a column
lambda_1993<-matrix((column3), nrow=6) #reshape to a matrix
lambda(lambda_1993)
colSums(lambda_1993)
eigs(lambda_1993)

##################
column4<-matrices.Niobrara[,4]  #extract a column
lambda_1994<-matrix((column4), nrow=6) #reshape to a matrix
lambda(lambda_1994)
colSums(lambda_1994)
eigs(lambda_1994)

##################
column5<-matrices.Niobrara[,5]  #extract a column
lambda_1995<-matrix((column5), nrow=6) #reshape to a matrix
lambda(lambda_1995)
colSums(lambda_1995)
eigs(lambda_1995)

##################
column6<-matrices.Niobrara[,6]  #extract a column
lambda_1996<-matrix((column6), nrow=6) #reshape to a matrix
lambda(lambda_1996)
colSums(lambda_1996)
eigs(lambda_1996)

##################
column7<-matrices.Niobrara[,7]  #extract a column
lambda_1997<-matrix((column7), nrow=6) #reshape to a matrix
lambda(lambda_1997)
colSums(lambda_1997)
eigs(lambda_1997)

##################
column8<-matrices.Niobrara[,8]  #extract a column
lambda_1998<-matrix((column8), nrow=6) #reshape to a matrix
lambda(lambda_1998)
colSums(lambda_1998)
eigs(lambda_1998)

##################
column9<-matrices.Niobrara[,9]  #extract a column
lambda_1999<-matrix((column9), nrow=6) #reshape to a matrix
lambda(lambda_1999)
colSums(lambda_1999)
eigs(lambda_1999)

##################
column10<-matrices.Niobrara[,10]  #extract a column
lambda_2000<-matrix((column10), nrow=6) #reshape to a matrix
lambda(lambda_2000)
colSums(lambda_2000)
eigs(lambda_2000)

##################
column11<-matrices.Niobrara[,11]  #extract a column
lambda_2001<-matrix((column11), nrow=6) #reshape to a matrix
lambda(lambda_2001)
colSums(lambda_2001)
eigs(lambda_2001)

##################
column12<-matrices.Niobrara[,12]  #extract a column
lambda_2002<-matrix((column12), nrow=6) #reshape to a matrix
lambda(lambda_2002)
colSums(lambda_2002)
eigs(lambda_2002)

##################
column13<-matrices.Niobrara[,13]  #extract a column
lambda_2003<-matrix((column13), nrow=6) #reshape to a matrix
lambda(lambda_2003)
colSums(lambda_2003)
eigs(lambda_2003)

##################
column14<-matrices.Niobrara[,14]  #extract a column
lambda_2004<-matrix((column14), nrow=6) #reshape to a matrix
lambda(lambda_2004)
colSums(lambda_2004)
eigs(lambda_2004)

##################
column15<-matrices.Niobrara[,15]  #extract a column
lambda_2005<-matrix((column15), nrow=6) #reshape to a matrix
lambda(lambda_2005)
colSums(lambda_2005)
eigs(lambda_2005)

##################
column16<-matrices.Niobrara[,16]  #extract a column
lambda_2006<-matrix((column16), nrow=6) #reshape to a matrix
lambda(lambda_2006)
colSums(lambda_2006)
eigs(lambda_2006)

##################
column17<-matrices.Niobrara[,17]  #extract a column
lambda_2007<-matrix((column17), nrow=6) #reshape to a matrix
lambda(lambda_2007)
colSums(lambda_2007)
eigs(lambda_2007)

##################
column18<-matrices.Niobrara[,18]  #extract a column
lambda_2008<-matrix((column18), nrow=6) #reshape to a matrix
lambda(lambda_2008)
colSums(lambda_2008)
eigs(lambda_2008)

##################
column19<-matrices.Niobrara[,19]  #extract a column
lambda_2009<-matrix((column19), nrow=6) #reshape to a matrix
lambda(lambda_2009)
colSums(lambda_2009)
eigs(lambda_2009)


Lambda_Niobrara <- c(lambda(lambda_1991), lambda(lambda_1992), lambda(lambda_1993), lambda(lambda_1994), lambda(lambda_1995), lambda(lambda_1996), lambda(lambda_1997), lambda(lambda_1998), lambda(lambda_1999), lambda(lambda_2000), lambda(lambda_2001), lambda(lambda_2002), lambda(lambda_2003), lambda(lambda_2004), lambda(lambda_2005), lambda(lambda_2006), lambda(lambda_2007), lambda(lambda_2008), lambda(lambda_2009))

Year <- as_tibble(1991:2009)


data.frame(Lambda_Niobrara <- cbind(Year, Lambda_Niobrara))


```

## Compare Transient Pop growth to Asymptotic Pop growth (Figure 5)

```{r}
##################################################
Stage.data <- read.csv("Stage.data.csv")

Stage.data.Niobrara <- Stage.data %>% filter(Site == "Niobrara")

Stage.data.Niobrara <- Stage.data.Niobrara %>% group_by(Year) %>% summarise(Total = sum(Total))


Stage.data.Niobrara = Stage.data.Niobrara %>%
  # first sort by year
  arrange(Year) %>%
  mutate(Pop_Diff = Total - lag(Total), # Difference in Population between years
         Growth.rate = Pop_Diff/lag(Total),
         Relative.change = Total/lag(Total),
         lamnda = exp(Growth.rate)) # growth rate 

mean(Stage.data.Niobrara$lamnda)

Stage.data.Niobrara <- Stage.data.Niobrara %>% filter(!Year == 1990)
Lambda_Niobrara$Site <- "Niobrara"
ggplot(Lambda_Niobrara) + geom_point(aes(x=value, y=Lambda_Niobrara, color = '#56B4E9')) + geom_line(aes(x=value, y=Lambda_Niobrara, color = '#56B4E9')) + geom_hline(yintercept=1, linetype="dashed", color = "black") + geom_line(aes(x=Stage.data.Niobrara$Year, y=Stage.data.Niobrara$Relative.change, color = '#E69F00')) + geom_point(aes(x=Stage.data.Niobrara$Year, y=Stage.data.Niobrara$Relative.change, color = '#E69F00')) + theme_bw() + ylab("Population Growth Rate") + xlab("Year") + ylim(c(0.6, 1.6)) + 
  scale_color_identity(name='Population Growth Rate Model',
                     breaks = c('#56B4E9', "#E69F00"),
                     labels=c("Asymptotic Growth Rate", 'Transient Growth Rate'),
                     guide = 'legend') + ylim(c(0.6, 2.5)) + facet_wrap(~Site)
  

NVP.datL <- cbind(Lambda_Niobrara, Transient = Stage.data.Niobrara$Relative.change)

App.datL <- read.csv("App.datL.csv")
App.datL $X <- NULL

colnames(App.datL)[2] <- "Lambda"
colnames(NVP.datL)[2] <- "Lambda"

dat.all <- rbind(App.datL, NVP.datL)

#ggplot(Stage.data.Niobrara, mapping = aes(x=Year, y=Total)) + geom_point() + geom_line() 

write.csv(Lambda_Niobrara, "Lambda_Niobrara.csv")

sd(Stage.data.Niobrara$lamnda)/sqrt(length(Stage.data.Niobrara$lamnda))
mean(Stage.data.Niobrara$lamnda)

summary(lm(Stage.data.Arapahoe$lamnda~Stage.data.Niobrara$lamnda))
```

## Main Figure (#5)

```{r}
ggplot(dat.all) + geom_point(aes(x= value, y=Lambda, color = '#56B4E9')) + geom_line(aes(x=value, y=Lambda, color = '#56B4E9')) + geom_hline(yintercept=1, linetype="dashed", color = "black") + geom_line(aes(x=value, y=Transient, color = '#E69F00')) + geom_point(aes(x=value, y=Transient, color = '#E69F00')) + theme_bw() + ylab("Population growth rate") + xlab("Census Year") + 
  scale_color_identity(name='Population Growth Rate Model',
                     breaks = c('#56B4E9', "#E69F00"),
                     labels=c("Asymptotic Growth Rate", 'Transient Growth Rate'),
                     guide = 'legend')  + facet_wrap(~Site) + 
  theme(text = element_text(size = 15),
        strip.text = element_text(size=15), axis.text.x = element_text(angle = 90, vjust = 0.5)) + theme(legend.position = "top") + theme(legend.title=element_blank())

```

## Plot Vital Rates

```{r}
VR_Niobrara1 <- pivot_longer(VR_Niobrara, 2:24, names_to = "VR", values_to = "Estimate")

ggplot(VR_Niobrara1, mapping = aes(x=Year, y=Estimate)) + geom_line() + geom_point() + facet_wrap(~VR) + theme_bw()
```

```{r}
mat_elements <- expression(
  ##To Seedling
  0, 
  0, 
  Seedling_rec*0.9, # From flowering single rosette to Seedlings 
  0, 
  Seedling_rec*0.1, # From flowering multiple rosette to Seedlings 
  0,
  
  ##To SR
  Seedlingsurv*SeedlingtoSR, # From Seedlings to SR
  (SRsurv*SRtoSR) + (SR_rec*0.9), # From SR to SR
  0, # From SF to SR
  (MRsurv*MRtoSR) + (SR_rec*0.1), # From MR to SR
  0, # From MF to SR
  IAsurv*IAtoSR, # From D to SR
  
  ## To SF
  0, # From Seedling to SF
  (SRsurv*SRtoSF) + (SF_rec*0.9), #From SR to SF
  0, # From SF to SF
  (MRsurv*MRtoSF) + (SF_rec*0.1), # From MR to SF
  0, # From MF to SF
  IAsurv*IAtoSF, # From D to SF
  
  ## To MR
  0, # From Seedling to MR
  (SRsurv*SRtoMR + MR_rec*0.9), # From SR to MR
  0, # From SF to MR
  (MRsurv * MRtoMR) + (MR_rec *0.1), # From MR to MR
  0, # From MF to MR
  IAsurv*IAtoMR, # From D to MR
  
  ## To MF
  0, # From Seedling to MF
  (SRsurv*SRtoMF) + (MF_rec*0.9), # From SR to MF
  0, # From SF to MF
  (MRsurv*MRtoMF) + (MF_rec*0.1), # From MR to MF
  0, # From MF to MF
  0, # From D to MF
  
  ## To inactive
  0, # From Seedling to D
  SRsurv*SRtoIA, # From SR to D
  0, # From SF to D
  MRsurv*MRtoIA, # From MR to D
  0, # From MF to D
  IAsurv*IAtoIA # From D to D
)


Mean_Niobrara <- colMeans(VR_Niobrara[2:25])

theta_Niobrara = list(IAsurv=Mean_Niobrara[1], IAtoSF=Mean_Niobrara[2], IAtoIA=Mean_Niobrara[3],
                 IAtoMR =Mean_Niobrara[4],IAtoSR=Mean_Niobrara[5], SRsurv=Mean_Niobrara[6], 
                 SRtoIA=Mean_Niobrara[7], SRtoSF=Mean_Niobrara[8], SRtoMF=Mean_Niobrara[9], 
                 SRtoMR=Mean_Niobrara[10], SRtoSR=Mean_Niobrara[11], MRsurv=Mean_Niobrara[12],
                 MRtoSF=Mean_Niobrara[13], MRtoMF=Mean_Niobrara[14], MRtoIA=Mean_Niobrara[15], 
                 MRtoMR=Mean_Niobrara[16], MRtoSR=Mean_Niobrara[17], Seedlingsurv=Mean_Niobrara[18], SeedlingtoSR=Mean_Niobrara[19], MR_rec=Mean_Niobrara[20], SR_rec=Mean_Niobrara[21], SF_rec=Mean_Niobrara[22], MF_rec=Mean_Niobrara[23], Seedling_rec=Mean_Niobrara[24])

Amn_Niobrara <- matrix(sapply(mat_elements,eval,theta_Niobrara), 6,6, byrow=F)

stage.names <- c("Seedling", "SR", "SF", "MR", "MF", "Inactive")
SSD.N <- eigs(Amn_Niobrara)$ss
SSD.N <- data.frame(SSD.N)

rownames(SSD.N) <- stage.names 
#SSD%>% tibble::rownames_to_column("Stage") %>% ggplot(aes(x=Stage, y=SSD, fill = Stage)) + geom_bar(position="stack", stat="identity") + theme_bw()

#######################################################################

SSD.N <- SSD.N %>% rownames_to_column(var="Stages") %>% ggplot(aes(x=factor(Stages, levels=c("Seedling", "SR","MR","SF","MF","Inactive")), y=SSD)) + geom_bar(stat = "identity", aes(fill = Stages), show.legend = FALSE) + ylab("Stable Stage Distribution") + scale_fill_viridis_d() + xlab("Stages") + theme_bw() + ggtitle(" Arapaho") + theme(text = element_text(size = 15),
        strip.text = element_text(size=15))
```

### **Predicting ramet population dynamics under different drought frequency scenarios (Figure 8)**

```{r}
SSD.mat1 <- matrix(c(
  ##To Seedling
  0, 
  0, 
  (VR_Niobrara[i, "Seedling_rec"])*0.9, # From flowering single rosette to Seedlings 
  0, 
  (VR_Niobrara[i, "Seedling_rec"])*0.1, # From flowering multiple rosette to Seedlings 
  0,
  
  ##To SR
  VR_Niobrara[i, "Seedlingsurv"]*VR_Niobrara[i, "SeedlingtoSR"], # From Seedlings to SR
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoSR"]) + (VR_Niobrara[i, "SR_rec"])*0.9, # From SR to SR
  0, # From SF to SR
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoSR"]) + (VR_Niobrara[i, "SR_rec"])*0.1, # From MR to SR
  0, # From MF to SR
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoSR"], # From D to SR
  
  ## To SF
  0, # From Seedling to SF
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoSF"])+ (VR_Niobrara[i, "SF_rec"])*0.9, #From SR to SF
  0, # From SF to SF
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoSF"])+ (VR_Niobrara[i, "SF_rec"])*0.1, # From MR to SF
  0, # From MF to SF
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoSF"], # From D to SF
  
  ## To MR
  0, # From Seedling to MR
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoMR"])+ (VR_Niobrara[i, "MR_rec"])*0.9, # From SR to MR
  0, # From SF to MR
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoMR"])+ (VR_Niobrara[i, "MR_rec"])*0.1, # From MR to MR
  0, # From MF to MR
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoMR"], # From D to MR
  
  ## To MF
  0, # From Seedling to MF
  (VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoMF"])+ (VR_Niobrara[i, "MF_rec"])*0.9, # From SR to MF
  0, # From SF to MF
  (VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoMF"])+ (VR_Niobrara[i, "MF_rec"])*0.1, # From MR to MF
  0, # From MF to MF
  0, # From D to MF
  
  ## To inactive
  0, # From Seedling to D
  VR_Niobrara[i, "SRsurv"]*VR_Niobrara[i, "SRtoIA"], # From SR to D
  0, # From SF to D
  VR_Niobrara[i, "MRsurv"]*VR_Niobrara[i, "MRtoIA"], # From MR to D
  0, # From MF to D
  VR_Niobrara[i, "IAsurv"]*VR_Niobrara[i, "IAtoIA"] # From D to D
),  nrow=6, byrow = F)

eigs(SSD.mat1)$ss

stage.names <- c("Seedling", "SR", "SF", "MR", "MF", "Inactive")
SSD <- eigs(SSD.mat1)$ss
SSD <- data.frame(SSD)

rownames(SSD) <- stage.names 
#SSD%>% tibble::rownames_to_column("Stage") %>% ggplot(aes(x=Stage, y=SSD, fill = Stage)) + geom_bar(position="stack", stat="identity") + theme_bw()

#######################################################################


SSD.N <- SSD %>% rownames_to_column(var="Stages") %>% ggplot(aes(x=factor(Stages, levels=c("Seedling", "SR","MR","SF","MF","Inactive")), y=SSD)) + geom_bar(stat = "identity", aes(fill = Stages), show.legend = FALSE) + ylab("Stable Stage Distribution") + scale_fill_viridis_d() + xlab("Stages") + theme_bw() + ggtitle(" Niobrara") + theme(text = element_text(size = 15),
        strip.text = element_text(size=15))


(712502-2090)/712502
(20607-378)/20607
(758-68)/758
```

```{r}
set.seed(54630)

## calculate the mean spei for the last 18 months to represent the mean annual spei. This approach is chosen because the effect of spei on lambda was found to have equal time-lag effect.

spei.data <- read.csv("Lag.spei_data.csv") # load in spei weather data
Niobrara.spei <- spei.data %>% filter(Site == "Niobrara") # we need only Niobrara data
Niobrara.spei$X <- NULL # not needed


Niobrara.spei <- Niobrara.spei %>%
rowwise() %>% 
  mutate(mean.spei = mean(spei.00:spei.12)) 

######### Select years of wetter-than-normal conditions
Niobrara_wet.yrs <- Niobrara.spei %>% filter(mean.spei >0)
Niobrara_dry.yrs <- Niobrara.spei %>% filter(mean.spei <0)

unique(Niobrara_wet.yrs$Year) ## extract wet years
unique(Niobrara_dry.yrs$Year) ## extract dry years

Niobrara_wet.matrix <- matrices.Niobrara[, c("1992", "1993", "1994", "1998", "1999", "2000", "2004", "2005", "2006", "2007", "2008", "2009")] ## Select population matrices that fall in wet years

Niobrara_dry.matrix <- matrices.Niobrara[, c("1991", "1995", "1996", "1997", "2001", "2002", "2003")] ## Select population matrices that fall in dry years


Lambda.wet <- Lambda_Niobrara %>% filter(value %in% c("1992", "1993", "1994", "1998", "1999", "2000", "2004", "2005", "2006", "2007", "2008", "2009"))



Lambda.dry <- Lambda_Niobrara %>% filter(value %in% c("1991", "1995", "1996", "1997", "2001", "2002", "2003"))

Lambda.wet$Condition <- "Wet"
Lambda.dry$Condition <- "Dry"

Lambda.N <- rbind(Lambda.wet, Lambda.dry)

```

## Project for different scenarios

```{r}
set.seed(54630)

#starting population close to stable stage distribution
SimTime=50 ## how many year in the future to project model
N_start=50 # initial number of indiviudals in each stage (arbitrary choice)

SSD2 <- eigs(SSD.mat1)$ss

#starting population close to stable stage distribution
Ini.pop = SSD2*N_start

spei.data <- read.csv("Lag.spei_data.csv") # load in spei weather data
Niobrara.spei <- spei.data %>% filter(Site == "Niobrara") # we need only Niobrara data
Niobrara.spei$X <- NULL # not needed

## calculate the mean spei for the last 18 months to represent the mean annual spei. This approach is chosen because the effect of spei on lambda was found to have equal time-lag effect.
Niobrara.spei <- Niobrara.spei %>%
rowwise() %>% 
  mutate(mean.spei = mean(spei.00:spei.18)) 

######### Select years of wetter-than-normal conditions
Niobrara_wet.yrs <- Niobrara.spei %>% filter(mean.spei >0)
Niobrara_dry.yrs <- Niobrara.spei %>% filter(mean.spei <0)

unique(Niobrara_wet.yrs$Year) ## extract wet years
unique(Niobrara_dry.yrs$Year) ## extract dry years

Niobrara_wet.matrix <- matrices.Niobrara[, c("1992", "1993", "1994", "1998", "1999", "2003", "2005", "2007", "2008", "2009")] ## Select population matrices that fall in wet years

Niobrara_dry.matrix <- matrices.Niobrara[, c("1991", "1995", "1996", "1997", "2000", "2001", "2002", "2004", "2006")] ## Select population matrices that fall in dry years





############################### Set P at 0.9#############################
Result.H=data.frame(Time=1:SimTime, 
                  Sd=c(Ini.pop[1], rep(0,SimTime-1)),
                  SR=c(Ini.pop[2], rep(0,SimTime-1)),
                  SF=c(Ini.pop[3], rep(0,SimTime-1)),
                  MR=c(Ini.pop[4], rep(0,SimTime-1)),
                  MF=c(Ini.pop[5], rep(0,SimTime-1)),
                  IA=c(Ini.pop[6], rep(0,SimTime-1)))
                 
Sim.Mat.H <- matrix(NA, nrow = 50, ncol = 1000)
Sim.mean.Pop.H <- matrix(NA, nrow = 50, ncol = 3)
colnames(Sim.mean.Pop.H) <- c("Median", "Lower", "Upper")

for(i in 1:1000){
for (t in 2:SimTime){
  if(runif(n=1,min=0,max=1) < 0.9) {
    dum=project(matrix(Niobrara_dry.matrix[, sample(1:ncol(Niobrara_dry.matrix), 1)], nrow=6), 
               c(Result.H$Sd[t-1], Result.H$SR[t-1], Result.H$SF[t-1], 
                 Result.H$MR[t-1], Result.H$MF[t-1], Result.H$IA[t-1]), time = 1)
  } else {dum=project(matrix(Niobrara_wet.matrix[, sample(1:ncol(Niobrara_wet.matrix), 1)], nrow = 6), 
               c(Result.H$Sd[t-1], Result.H$SR[t-1], Result.H$SF[t-1], 
                 Result.H$MR[t-1], Result.H$MF[t-1], Result.H$IA[t-1]), time = 1)}
  
   Result.H$Sd[t]=vec(dum)[2,1]
   Result.H$SR[t]=vec(dum)[2,2]
   Result.H$SF[t]=vec(dum)[2,3]
   Result.H$MR[t]=vec(dum)[2,4]
   Result.H$MF[t]=vec(dum)[2,5]
   Result.H$IA[t]=vec(dum)[2,6]
   
   Pop.est.H=rowSums(Result.H[, 2:7])
}
Sim.Mat.H[, i] <- Pop.est.H

}

for (t in 1:SimTime){
  Sim.mean.Pop.H[t, 1] <- Sim.Mat.H[t, ] %>% median()
  Sim.mean.Pop.H[t, 2] <- quantile(Sim.Mat.H[t, ], probs=c(.05,.95), type = 8)[1] 
  Sim.mean.Pop.H[t, 3] <- quantile(Sim.Mat.H[t, ], probs=c(.05,.95), type = 8)[2] 
}

Sim.mean.Pop.H <- data.frame(Sim.mean.Pop.H)

Sim.mean.Pop.H$Time <- 1:50

ggplot(Sim.mean.Pop.H, mapping = aes(x=Time, y=Median)) + 
  geom_ribbon(aes(ymin=Lower, ymax=Upper),
              alpha=0.5) +
    geom_line()



############################### Set P at 0.1#############################
Result.L=data.frame(Time=1:SimTime, 
                  Sd=c(Ini.pop[1], rep(0,SimTime-1)),
                  SR=c(Ini.pop[2], rep(0,SimTime-1)),
                  SF=c(Ini.pop[3], rep(0,SimTime-1)),
                  MR=c(Ini.pop[4], rep(0,SimTime-1)),
                  MF=c(Ini.pop[5], rep(0,SimTime-1)),
                  IA=c(Ini.pop[6], rep(0,SimTime-1)))
                 

Sim.Mat_L <- matrix(NA, nrow = 50, ncol = 1000)
Sim.mean.Pop_L <- matrix(NA, nrow = 50, ncol = 3)
colnames(Sim.mean.Pop_L) <- c("Median", "Lower", "Upper")

for(i in 1:1000){
for (t in 2:SimTime){
  if(runif(n=1,min=0,max=1) < 0.1) {
    dum=project(matrix(Niobrara_dry.matrix[, sample(1:ncol(Niobrara_dry.matrix), 1)], nrow=6), 
               c(Result.L$Sd[t-1], Result.L$SR[t-1], Result.L$SF[t-1], 
                 Result.L$MR[t-1], Result.L$MF[t-1], Result.L$IA[t-1]), time = 1)
  } else {dum=project(matrix(Niobrara_wet.matrix[, sample(1:ncol(Niobrara_wet.matrix), 1)], nrow = 6), 
               c(Result.L$Sd[t-1], Result.L$SR[t-1], Result.L$SF[t-1], 
                 Result.L$MR[t-1], Result.L$MF[t-1], Result.L$IA[t-1]), time = 1)}
  
   Result.L$Sd[t]=vec(dum)[2,1]
   Result.L$SR[t]=vec(dum)[2,2]
   Result.L$SF[t]=vec(dum)[2,3]
   Result.L$MR[t]=vec(dum)[2,4]
   Result.L$MF[t]=vec(dum)[2,5]
   Result.L$IA[t]=vec(dum)[2,6]
   
   Pop.est_L=rowSums(Result.L[, 2:7])
}
Sim.Mat_L[, i] <- Pop.est_L

}

for (t in 1:SimTime){
  Sim.mean.Pop_L[t, 1] <- Sim.Mat_L[t, ] %>% median()
  Sim.mean.Pop_L[t, 2] <- quantile(Sim.Mat_L[t, ], probs=c(.05,.95), type = 8)[1]
  Sim.mean.Pop_L[t, 3] <- quantile(Sim.Mat_L[t, ], probs=c(.05,.95), type = 8)[2]
}

Sim.mean.Pop1_L <- data.frame(Sim.mean.Pop_L)

Sim.mean.Pop1_L$Time <- 1:50

ggplot(Sim.mean.Pop1_L, mapping = aes(x=Time, y=Median)) + 
  geom_ribbon(aes(ymin=Lower, ymax=Upper),
              alpha=0.5) +
    geom_line()


############################### Set P at 0.5#############################
Result.M=data.frame(Time=1:SimTime, 
                  Sd=c(Ini.pop[1], rep(0,SimTime-1)),
                  SR=c(Ini.pop[2], rep(0,SimTime-1)),
                  SF=c(Ini.pop[3], rep(0,SimTime-1)),
                  MR=c(Ini.pop[4], rep(0,SimTime-1)),
                  MF=c(Ini.pop[5], rep(0,SimTime-1)),
                  IA=c(Ini.pop[6], rep(0,SimTime-1)))
                 
Sim.Mat_M <- matrix(NA, nrow = 50, ncol = 1000)
Sim.mean.Pop_M <- matrix(NA, nrow = 50, ncol = 3)
colnames(Sim.mean.Pop_M) <- c("Median", "Lower", "Upper")

for(i in 1:1000){
for (t in 2:SimTime){
  if(runif(n=1,min=0,max=1) < 0.5) {
    dum=project(matrix(Niobrara_dry.matrix[, sample(1:ncol(Niobrara_dry.matrix), 1)], nrow=6), 
               c(Result.M$Sd[t-1], Result.M$SR[t-1], Result.M$SF[t-1], 
                 Result.M$MR[t-1], Result.M$MF[t-1], Result.M$IA[t-1]), time = 1)
  } else {dum=project(matrix(Niobrara_wet.matrix[, sample(1:ncol(Niobrara_wet.matrix), 1)], nrow = 6), 
               c(Result.M$Sd[t-1], Result.M$SR[t-1], Result.M$SF[t-1], 
                 Result.M$MR[t-1], Result.M$MF[t-1], Result.M$IA[t-1]), time = 1)}
  
   Result.M$Sd[t]=vec(dum)[2,1]
   Result.M$SR[t]=vec(dum)[2,2]
   Result.M$SF[t]=vec(dum)[2,3]
   Result.M$MR[t]=vec(dum)[2,4]
   Result.M$MF[t]=vec(dum)[2,5]
   Result.M$IA[t]=vec(dum)[2,6]
   
   Pop.est_M=rowSums(Result.M[, 2:7])
}
Sim.Mat_M[, i] <- Pop.est_M

}

for (t in 1:SimTime){
  Sim.mean.Pop_M[t, 1] <- Sim.Mat_M[t, ] %>% median()
  Sim.mean.Pop_M[t, 2] <- quantile(Sim.Mat_M[t, ], probs=c(.05,.95), type = 8)[1]
  Sim.mean.Pop_M[t, 3] <- quantile(Sim.Mat_M[t, ], probs=c(.05,.95), type = 8)[2]
}

Sim.mean.Pop1_M <- data.frame(Sim.mean.Pop_M)

Sim.mean.Pop1_M$Time <- 1:50

ggplot(Sim.mean.Pop1_M, mapping = aes(x=Time, y=Median)) + 
  geom_ribbon(aes(ymin=Lower, ymax=Upper),
              alpha=0.5) +
    geom_line()
##############################################################################
Sim.mean.Pop1_L$Level <- "Low"
Sim.mean.Pop1_M$Level <- "No Change"
Sim.mean.Pop.H$Level <- "High"

Pred.Niobrara1 <- rbind(Sim.mean.Pop1_M, Sim.mean.Pop1_L, Sim.mean.Pop.H)

Pred.Niobrara1$Levels <- factor(Pred.Niobrara1$Level, levels = c("Low", "No Change", "High"))


P.N1 <- ggplot(Pred.Niobrara1, mapping = aes(x=Time, y=log(Median), fill = Levels, col = Levels)) + 
  geom_ribbon(aes(ymin=log(Lower), ymax=log(Upper)), linetype = 2,
              alpha=0.5) +
    geom_line() + theme_bw() + ylab("log(Predicted population)") + theme(legend.position = "top") + guides(fill=guide_legend("Drought Frequency"), col=guide_legend("Drought Frequency")) +
  theme(text = element_text(size = 15),
        strip.text = element_text(size=15)) + ggtitle("Niobrara") + scale_color_manual(values=c("#009E73",'#B0E647', '#E74739') )+ scale_fill_manual(values=c("#009E73",'#B0E647', '#E74739')) + xlab("Year")
```

## Make plot for lambda values during wet and dry years

```{r}
P3 <- ggplot(Lambda.N, aes(x=Condition, y=Lambda_Niobrara)) + geom_violin(width=0.5, aes(fill= Condition), alpha=0.4, show.legend = FALSE) + geom_boxplot(width=0.1, aes(fill= Condition), alpha=0.4, show.legend = FALSE) + theme_bw() + geom_point(col = "black") + ylab(expression(paste("Asymptotic (", lambda[t],")"))) +
  scale_fill_viridis_d() + xlab("Climate") + annotate(geom="text", x=1.5, y=1.5, size=5, label="p=0.64") + ggtitle("Niobrara") +
  theme(text = element_text(size = 15),
        strip.text = element_text(size=15)) 


Lambda.N$Lambda_Niobrara
```

![](http://127.0.0.1:13185/chunk_output/57E7F695c057de89/E8003933/chhv0oj2uv52x/000026.png?resize=54)
